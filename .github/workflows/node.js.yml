name: CI/CD for Express.js app (Node.js)

on:

  push:
    branches: [ main ]
    tags: [ '*\.*\.*' ]
  pull_request:
    branches: [ main ]

jobs:

  build:
    name: Build Production App
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Sourcecode
      uses: actions/checkout@v2
    - name: Use Node.js 14.18
      uses: actions/setup-node@v2
      with:
        node-version: 14.18
        cache: 'npm'
    - name: Install npm packages
      run: npm install
    - name: Build Production App Bundle
      run: npm run webpack-production

    - name: Upload Production App Bundle
      uses: actions/upload-artifact@v1
      with:
        name: app-bundle
        path: public/app-bundle.js

    - name: Show dir listing BEFORE ACTION CHECKOUT
      run: ls -la

    - name: Docker Build
      run: docker build . --tag express-js-app:14.18


    - name: Docker Run
      run: docker run --name express-js-app-container --detach --publish 45678:8181 --tty express-js-app:14.18



    # - name: Show running Container Name
    #   run: echo "Container name is:${{ env.container-name }}"


      # run echo "::set-output name=TAG_NAME::$(cat projectFile | grep -Po '(?<=Version>).*(?=</Version>)')"


#    - name: Download Production Build Artefact (useless..)
#      uses: actions/download-artifact@v1
#      with:
#        name: app-bundle
#        path: .

#    - name: AFTER DOWNLOAD -- Show dir listing
#      run: ls -la

    # - name: Run Docker Container Deployment
    # id: hello
    # uses: ./.github/actions/hello-world
    # Use the output from the `hello` step


#    - name: Wait until container is up ..
#      run: docker wait express-js-app-container

    - name: Sleep 5 seconds
      run: sleep 5s

#    - name: Wait until Docker container is running
#      run: |
#        until [ "`docker inspect -f {{.State.Running}} express-js-app-container`"=="true" ]; do \
#          sleep 1.1; \
#          echo "Waiting till container [express-js-app-container] is running"; \
#        done;

    - name: Send a cURL request to the Docker container
      run: curl --connect-timeout 5 -i 0.0.0.0:45678/user

    - name: Stop the Docker container
      run: docker stop express-js-app-container

    - name: Wait until container is down
      run: docker wait express-js-app-container

  docker-job:
    runs-on: ubuntu-latest
    if: true == false
    needs: build
    name: Dockerize Production App
    steps:

     - name: Checkout
       uses: actions/checkout@v2
       with:
         path: .github/actions/hello-world

     - name: Download Production Build Artefact
       uses: actions/download-artifact@v1
       with:
         name: app-bundle
         path: .

     - name: AFTER CHECKOUT -- Show app-bundle.js file
       run: ls -la ./app-bundle.js

     - name: AFTER CHECKOUT -- Show dir listing
       run: ls -la

     - name: Run Docker Container Deployment
       id: hello
       uses: ./.github/actions/hello-world
     # Use the output from the `hello` step
     - name: Get the output time
       run: echo "The output time was ${{ steps.hello.outputs.time }}"

  run-unit-tests:
    name: Unit Tests
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [14.18] # [12.x, 13.x, 14.x, 15.x, 16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        os: [ubuntu-latest] # [ubuntu-latest, ubuntu-20.04, ubuntu-18.04]
    steps:
    - uses: actions/checkout@v2
    - name: Print a greeting
      run: echo Hello everyone! We are executing all JEST tests here!
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm install
    - run: echo Running Jest Unit tests
    - run: npm test
    - name: Upload Test Report Artefact
      uses: actions/upload-artifact@v1
      with:
        name: test-results
        path: public/test-results.xml
    - name: Upload Test Coverage Report Artefact
      uses: actions/upload-artifact@v1
      with:
        name: test-coverage
        path: public/coverage

  run-code-inspection:
    name: Code Inspection
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [14.18] # [12.x, 13.x, 14.x, 15.x, 16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        os: [ubuntu-latest] # [ubuntu-latest, ubuntu-20.04, ubuntu-18.04]
    steps:
    - uses: actions/checkout@v2
    - name: Print a greeting
      run: echo Hello everyone! We are now linting the code ..
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm install
    - name: Run ESLint Scan on app sourcecode
      run: npm run eslint-scan
    - name: Generate ESLint Report from app sourcecode scan
      run: npm run eslint-report
    - name: Upload Linter Report Artefact
      uses: actions/upload-artifact@v1
      with:
        name: linter-results
        path: public/linter-results.xml

  generate-jsdoc:
    name: Generate Documentation
    needs: [run-unit-tests, run-code-inspection]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [14.18] # [12.x, 13.x, 14.x, 15.x, 16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        os: [ubuntu-latest] # [ubuntu-latest, ubuntu-20.04, ubuntu-18.04]
    steps:
    - uses: actions/checkout@v2
    - name: Print a greeting
      run: echo Hello everyone! We are now generating JSDoc documentation for all JavaScript source codes ..
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm install
    - run: npm run jsdoc
    - name: Upload JSDoc documentation
      uses: actions/upload-artifact@v1
      with:
        name: jsdoc-sourcecode-documentation
        path: public/jsdoc

  create-github-release:
    name: Create GitHub Release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: generate-jsdoc
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 14.18
      uses: actions/setup-node@v2
      with:
        node-version: 14.18
        cache: 'npm'
    - name: Pick Release Version from git tag
      run: echo "release-version=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: Debug out picked Release Version from git tag
      run: echo The release version picked from the tag is:${{ env.release-version }}
    - name: Install npm packages
      run: npm install
    - name: Download Production Build Artefact
      uses: actions/download-artifact@v1
      with:
        name: app-bundle
        path: public
    - name: Delete Production Build Artefact
      uses: geekyeggo/delete-artifact@v1
      with:
        name: app-bundle
    - name: Rename Production Build Artefact by inserting release version
      run: mv "public/app-bundle.js" "public/app-bundle-v${{ env.release-version }}.js"
    - name: Upload Renamed Production Build Artefact
      uses: actions/upload-artifact@v1
      with:
        name: app-bundle-v${{ env.release-version }}
        path: public/app-bundle-v${{ env.release-version }}.js
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        name: Release v${{ env.release-version }}
        tag: ${{ env.release-version }}
        artifacts: 'public/app-bundle-v${{ env.release-version }}.js'
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true
        omitBody: true
        removeArtifacts: true
