name: CI/CD for Node.js app

on:

  push:
    branches: [ main ]
    tags: [ '*\.*\.*' ]
  pull_request:
    branches: [ main ]

jobs:

  build-production:
    name: Build Production App
    runs-on: ubuntu-latest
    steps:
    - name: Checkout GitHub Repository
      uses: actions/checkout@v2
    - name: Use Node.js 14.18
      uses: actions/setup-node@v2
      with:
        node-version: 14.18
        cache: 'npm'
    - name: Install npm packages
      run: npm install
    - name: Build Production App Bundle
      run: npm run webpack-production
    - name: Upload Production App Bundle to Build Artefacts
      uses: actions/upload-artifact@v1
      with:
        name: app-bundle
        path: public/app-bundle.js

  run-unit-tests:
    name: Unit Tests
    needs: build-production
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [12.x, 13.x, 14.x, 15.x, 16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        os: [ubuntu-latest, ubuntu-20.04, ubuntu-18.04]
    steps:
    - name: Checkout GitHub Repository
      uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm install
    - run: echo Running Jest Unit tests
    - run: npm test
    - name: Upload Test Report Artefact
      uses: actions/upload-artifact@v1
      with:
        name: test-results
        path: public/test-results.xml
    - name: Upload Test Coverage Report Artefact
      uses: actions/upload-artifact@v1
      with:
        name: test-coverage
        path: public/coverage

  run-code-inspection:
    name: Code Inspection
    needs: build-production
    runs-on: ubuntu-latest
    steps:
    - name: Checkout GitHub Repository
      uses: actions/checkout@v2
    - name: Use Node.js 14.18
      uses: actions/setup-node@v2
      with:
        node-version: 14.18
        cache: 'npm'
    - run: npm install
    - name: Run ESLint Scan on app sourcecode
      run: npm run eslint-scan
    - name: Generate ESLint Report from app sourcecode scan
      run: npm run eslint-report
    - name: Upload Linter Report Artefact
      uses: actions/upload-artifact@v1
      with:
        name: linter-results
        path: public/linter-results.xml

  generate-jsdoc:
    name: Generate Documentation
    needs: [run-unit-tests, run-code-inspection]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout GitHub Repository
      uses: actions/checkout@v2
    - name: Use Node.js 14.18
      uses: actions/setup-node@v2
      with:
        node-version: 14.18
        cache: 'npm'
    - run: npm install
    - run: npm run jsdoc
    - name: Upload JSDoc documentation
      uses: actions/upload-artifact@v1
      with:
        name: jsdoc-sourcecode-documentation
        path: public/jsdoc

  docker-job:
    runs-on: ubuntu-latest
    needs: build-production
    name: Dockerize Production App
    steps:
      - name: Checkout GitHub Repository
        uses: actions/checkout@v2
      - name: Download Production Build Artefact
        uses: actions/download-artifact@v1
        with:
          name: app-bundle
          path: public
      - name: Build Docker Image from Dockerfile
        run: docker build . --tag express-js-app:14.18
      - name: Create and run Docker Container from Docker Image
        run: docker run --name express-js-app-container --detach --publish 45678:8181 --tty express-js-app:14.18
      - name: Sleep 5 seconds (wait till Express.js app is running)
        run: sleep 5s
      - name: Send a cURL request to the Docker container
        run: curl --connect-timeout 5 -i 0.0.0.0:45678/user
      - name: Stop the Docker Container
        run: docker stop express-js-app-container
      - name: Wait until Docker Container is down
        run: docker wait express-js-app-container
